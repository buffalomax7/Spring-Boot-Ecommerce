{"ast":null,"code":"var _jsxFileName = \"/home/nix/Documents/my_apps/Hobbie_fullstack/react-frontend/src/components/SignUp.jsx\";\nimport React from 'react';\nimport blueImg from '/src/img/blueImg.png';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst SignUp = () => {\n  let navigate = useNavigate();\n  const [checked, setCheckBoxChecked] = useState(\"other\");\n  const [info, setInfo] = useState({\n    username: '',\n    fullname: '',\n    gender: '',\n    email: '',\n    password: '',\n    repeatpassword: ''\n  });\n  const [errors, setErrors] = useState({});\n\n  const validate = () => {\n    const errors = {}; //TODO username or email already exists?\n\n    if (!info.username) {\n      errors.username = 'Username is required';\n    } else if (info.username.length < 5) {\n      errors.username = 'Username must be at least 5 characters long';\n    }\n\n    if (!info.fullname) {\n      errors.fullname = \"Fullname is required\";\n    } else if (info.fullname.length < 2 || info.fullname.length > 20) {\n      errors.fullname = \"Text has to be between 2 and 20 characters long\";\n    }\n\n    if (!info.email) {\n      errors.email = 'Email is required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(info.email)) {\n      errors.email = 'Invalid email address';\n    }\n\n    if (!info.password) {\n      errors.password = \"A password is required\";\n    }\n\n    if (!info.repeatpassword) {\n      errors.repeatpassword = \"Please repeate the password\";\n    }\n\n    if (info.password !== info.repeatpassword) {\n      errors.repeatpassword = \"Passwords don't match\";\n    }\n\n    return errors;\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let errors = validate(info);\n    setErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      console.log(info);\n      navigate(\"/test\");\n    } else {\n      console.log(errors);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, \"Sign up\"), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"userInfo\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setInfo({ ...info,\n      username: e.target.value\n    }),\n    type: \"text\",\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    id: \"name\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Username\"), errors.username && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"errors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, \"Invalid Username\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onChange: e => setInfo({ ...info,\n      fullname: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, \"Full Name\"), errors.fullname && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"errors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 37\n    }\n  }, \"Invalid Full Name\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field-radio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    id: \"gender\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Gender\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-choice-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => setCheckBoxChecked(\"male\"),\n    onChange: e => setInfo({ ...info,\n      gender: \"male\"\n    }),\n    checked: checked === \"male\",\n    type: \"checkbox\",\n    id: \"checkbox1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    htmlFor: \"checkbox1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Male\"), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => setCheckBoxChecked(\"female\"),\n    onChange: e => setInfo({ ...info,\n      gender: \"female\"\n    }),\n    checked: checked === \"female\",\n    type: \"checkbox\",\n    id: \"checkbox2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    htmlFor: \"checkbox1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Female\"), /*#__PURE__*/React.createElement(\"input\", {\n    onClick: () => setCheckBoxChecked(\"other\"),\n    onChange: e => setInfo({ ...info,\n      gender: \"other\"\n    }),\n    checked: checked === \"other\",\n    type: \"checkbox\",\n    id: \"checkbox3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    htmlFor: \"checkbox1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"Other\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    onChange: e => setInfo({ ...info,\n      email: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 23\n    }\n  }, \"Email\"), errors.email && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"errors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 39\n    }\n  }, errors.email))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    onChange: e => setInfo({ ...info,\n      password: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 27\n    }\n  }, \"Password\"), errors.password && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"errors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 46\n    }\n  }, \"Invalid password\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"name-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"repassword\",\n    name: \"repassword\",\n    type: \"password\",\n    onChange: e => setInfo({ ...info,\n      repeatpassword: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"repassword\",\n    className: \"label-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"content-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 31\n    }\n  }, \"Confirm Password\"), errors.repeatpassword && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"errors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 61\n    }\n  }, errors.repeatpassword))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"button\",\n    type: \"submit\",\n    className: \"button button2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 23\n    }\n  }, \"Sign up\")))), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"blueImg2\",\n    src: blueImg,\n    alt: \"blueImg2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }));\n}; // import React from 'react';\n// import { Formik, Field, Form, ErrorMessage } from 'formik';\n// import { useState } from 'react'\n// import * as Yup from 'yup';\n// const SignUp = () => {\n//     const [checked, setCheckBoxChecked] = useState(\"other\");\n//   return (\n//     <Formik\n//       initialValues={{       \n//         username: '',\n//       fullname: '',\n//       gender: '',\n//       email: '',\n//       password: '',\n//       repassword: '' }}\n//       validationSchema={Yup.object({\n//         username: Yup.string()\n//           .max(15, 'Must be 15 characters or less')\n//           .required('Required'),\n//         fullname: Yup.string()\n//           .max(20, 'Must be 20 characters or less')\n//           .required('Required'),\n//         email: Yup.string().email('Invalid email address').required('Required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           alert(JSON.stringify(values, null, 2));\n//           setSubmitting(false);\n//         }, 400);\n//       }}\n//     >    \n//       <Form>\n//       <div>\n//              <div className=\"test\">\n//                 <h2>Sign up</h2>\n//      <div id=\"userInfo\">\n//                 <div className=\"row\">\n//   <div className=\"form-field\">\n//     <div className=\"name-section\">\n//     <Field name=\"username\" type=\"text\" />\n//         <label htmlFor=\"firstName\" className=\"label-name\"><span className=\"content-name\">Username</span>\n//         <ErrorMessage class=\"errors\" name=\"username\" /></label>\n//     </div>\n//     </div>\n//     </div>\n//         <label htmlFor=\"fullname\">Full Name</label>\n//         <Field name=\"fullname\" type=\"text\" />\n//         <ErrorMessage name=\"fullname\" />\n//         <label htmlFor=\"gender\">Gender</label>\n//         <Field name=\"gender\" as=\"select\" >   \n//         <option value=\"male\">Male</option>\n//         <option value=\"female\">Female</option>\n//          <option value=\"other\">Other</option>\n//         </Field>\n//         <ErrorMessage name=\"gender\" />\n//         <label htmlFor=\"email\">Email</label>\n//         <Field name=\"email\" type=\"email\" />\n//         <ErrorMessage name=\"email\" />\n//         <label htmlFor=\"password\">Email</label>\n//         <Field name=\"password\" type=\"password\" />\n//         <ErrorMessage name=\"password\" />\n//         <label htmlFor=\"repassword\">Email</label>\n//         <Field name=\"repassword\" type=\"password\" />\n//         <ErrorMessage name=\"repassword\" />\n//         <button type=\"submit\">Submit</button>\n//         </div>\n//     </div>\n//   </div>\n//       </Form>\n//     </Formik>\n//   );\n// };\n\n\nexport default SignUp;","map":{"version":3,"sources":["/home/nix/Documents/my_apps/Hobbie_fullstack/react-frontend/src/components/SignUp.jsx"],"names":["React","blueImg","useState","useNavigate","SignUp","navigate","checked","setCheckBoxChecked","info","setInfo","username","fullname","gender","email","password","repeatpassword","errors","setErrors","validate","length","test","submitHandler","event","preventDefault","Object","keys","console","log","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport blueImg from '/src/img/blueImg.png'\nimport { useState } from 'react';\nimport {useNavigate} from 'react-router-dom'\n\n\n\n\n\nconst SignUp = () => {\n    let navigate = useNavigate();\n    const [checked, setCheckBoxChecked] = useState(\"other\");\n    const [info, setInfo] = useState({\n        username: '',\n        fullname: '',\n        gender: '',\n        email: '',\n        password: '',\n        repeatpassword: ''\n    });\n\n    const [errors, setErrors] = useState({});\n\n\n    const validate = () => {\n        const errors = {};\n    \n        //TODO username or email already exists?\n\n        if (!info.username) {\n            errors.username = 'Username is required'\n        } else if (info.username.length < 5) {\n        errors.username = 'Username must be at least 5 characters long'\n        }\n    \n        if (!info.fullname) {\n            errors.fullname = \"Fullname is required\"\n        } else if (info.fullname.length < 2 || info.fullname.length > 20) {\n            errors.fullname = \"Text has to be between 2 and 20 characters long\"\n        }\n        \n     if (!info.email) {\n             errors.email = 'Email is required';\n     } else if (\n             !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(info.email)\n     ) {\n             errors.email = 'Invalid email address';\n     }\n\n     if (!info.password) {\n        errors.password = \"A password is required\"\n    }\n    if (!info.repeatpassword) {\n        errors.repeatpassword = \"Please repeate the password\"\n    }\n    if (info.password !== info.repeatpassword) {\n        errors.repeatpassword = \"Passwords don't match\"\n    }\n    \n     return errors;\n    }\n    \n\n\n  \n    const submitHandler= (event) =>{\n        event.preventDefault();\n        let errors = validate(info)\n        setErrors(errors);\n        \n        if(Object.keys(errors).length === 0){\n            console.log(info)\n             navigate(\"/test\")\n        }\n        else {\n            console.log(errors);\n        }\n    }\n\n\n    return (\n        <div>\n            <div className=\"test\">\n    <h2>Sign up</h2>\n  {/* {signUpState.userNameOrEmailExist &&  <div className=\"errors\" >\n         This username or email already exist.\n     </div>} */}\n    \n    <form id=\"userInfo\" onSubmit={submitHandler}> \n  <div className=\"row\">\n  <div className=\"form-field\">\n    <div className=\"name-section\">\n        <input  onChange={e => setInfo({...info, username : e.target.value})} \n        type=\"text\" name=\"name\" />\n        <label id=\"name\" className=\"label-name\">\n            <span className=\"content-name\">Username</span>\n           {errors.username  && <small className=\"errors\">Invalid Username</small>} \n        </label>\n    </div>\n    </div>\n    </div>\n    <div className=\"row\">\n        <div className=\"form-field\">\n          <div className=\"name-section\">\n              <input  type=\"text\" name=\"name\" onChange={e => setInfo({...info, fullname : e.target.value})} \n        />\n              <label htmlFor=\"name\" className=\"label-name\">\n                  <span className=\"content-name\">Full Name</span>\n                {errors.fullname && <small className=\"errors\">Invalid Full Name</small>}  \n              </label>\n          </div>\n          </div>\n          </div>\n        \n    <div className=\"row\">\n        <div className=\"form-field-radio\">\n            <div className=\"name-section\">\n            <label id=\"gender\" className=\"label-name\">\n                <span className=\"content-name\">Gender</span>\n                {/* {signUpState.emtpyGender && <small  className=\"errors\"> Can not be empty</small>} */}\n            </label>\n        </div>\n        <div  className=\"checkbox-choice-section\">\n            <input onClick={() =>setCheckBoxChecked(\"male\")} onChange={e => setInfo({...info, gender : \"male\"})} \n        checked={checked === \"male\"}  \n        type=\"checkbox\" id=\"checkbox1\" />\n            <label  className=\"checkbox\" htmlFor=\"checkbox1\">Male</label>\n            <input   onClick={() =>setCheckBoxChecked(\"female\")} onChange={e => setInfo({...info, gender : \"female\"})}\n        checked={checked === \"female\"}\n                type=\"checkbox\"  id=\"checkbox2\" />\n            <label className=\"checkbox\" htmlFor=\"checkbox1\">Female</label>\n            <input  onClick={() => setCheckBoxChecked(\"other\")} onChange={e => setInfo({...info, gender : \"other\"})}\n         checked={checked ===\"other\"}\n                type=\"checkbox\"  id=\"checkbox3\"     />\n            <label className=\"checkbox\" htmlFor=\"checkbox1\">Other</label>\n        </div>\n    </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"form-field\">\n              <div className=\"name-section\">\n              \n      <input id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={e => setInfo({...info, email : e.target.value})} \n        />\n                  <label htmlFor=\"name\" className=\"label-name\">\n                      <span className=\"content-name\">Email</span>\n                     {errors.email && <small className=\"errors\">{errors.email}</small>} \n                  </label>\n              </div>\n              </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"form-field\">\n                  <div className=\"name-section\">\n                  <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        onChange={e => setInfo({...info, password : e.target.value})}\n        />\n \n                      <label htmlFor=\"name\" className=\"label-name\">\n                          <span className=\"content-name\">Password</span>\n                         {errors.password && <small  className=\"errors\">Invalid password</small>} \n                      </label>\n                  </div>\n                  </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-field\">\n                      <div className=\"name-section\">\n                      <input\n        id=\"repassword\"\n        name=\"repassword\"\n        type=\"password\"\n        onChange={e => setInfo({...info, repeatpassword : e.target.value})} \n       />\n   \n                          <label htmlFor=\"repassword\" className=\"label-name\">\n                              <span className=\"content-name\">Confirm Password</span>\n                                 {errors.repeatpassword  && <small className=\"errors\" >{errors.repeatpassword}</small>}\n                          </label>\n                      </div>\n                      </div>\n                      </div>\n                     \n                        <div className=\"form-field\">\n                      <button id=\"button\" type=\"submit\" className=\"button button2\">Sign up</button>\n                        </div>\n    </form>\n\n </div>\n    <img className=\"blueImg2\" src={blueImg} alt=\"blueImg2\"></img>\n        </div>\n    )\n\n}\n\n// import React from 'react';\n// import { Formik, Field, Form, ErrorMessage } from 'formik';\n// import { useState } from 'react'\n// import * as Yup from 'yup';\n\n// const SignUp = () => {\n        \n//     const [checked, setCheckBoxChecked] = useState(\"other\");\n//   return (\n//     <Formik\n//       initialValues={{       \n//         username: '',\n//       fullname: '',\n//       gender: '',\n//       email: '',\n//       password: '',\n//       repassword: '' }}\n//       validationSchema={Yup.object({\n//         username: Yup.string()\n//           .max(15, 'Must be 15 characters or less')\n//           .required('Required'),\n//         fullname: Yup.string()\n//           .max(20, 'Must be 20 characters or less')\n//           .required('Required'),\n//         email: Yup.string().email('Invalid email address').required('Required'),\n//       })}\n//       onSubmit={(values, { setSubmitting }) => {\n//         setTimeout(() => {\n//           alert(JSON.stringify(values, null, 2));\n//           setSubmitting(false);\n//         }, 400);\n//       }}\n//     >    \n//       <Form>\n//       <div>\n//              <div className=\"test\">\n//                 <h2>Sign up</h2>\n//      <div id=\"userInfo\">\n\n\n//                 <div className=\"row\">\n//   <div className=\"form-field\">\n//     <div className=\"name-section\">\n//     <Field name=\"username\" type=\"text\" />\n//         <label htmlFor=\"firstName\" className=\"label-name\"><span className=\"content-name\">Username</span>\n//         <ErrorMessage class=\"errors\" name=\"username\" /></label>\n//     </div>\n//     </div>\n//     </div>\n\n\n    \n\n//         <label htmlFor=\"fullname\">Full Name</label>\n//         <Field name=\"fullname\" type=\"text\" />\n//         <ErrorMessage name=\"fullname\" />\n\n//         <label htmlFor=\"gender\">Gender</label>\n//         <Field name=\"gender\" as=\"select\" >   \n//         <option value=\"male\">Male</option>\n//         <option value=\"female\">Female</option>\n//          <option value=\"other\">Other</option>\n//         </Field>\n//         <ErrorMessage name=\"gender\" />\n\n//         <label htmlFor=\"email\">Email</label>\n//         <Field name=\"email\" type=\"email\" />\n//         <ErrorMessage name=\"email\" />\n\n//         <label htmlFor=\"password\">Email</label>\n//         <Field name=\"password\" type=\"password\" />\n//         <ErrorMessage name=\"password\" />\n\n//         <label htmlFor=\"repassword\">Email</label>\n//         <Field name=\"repassword\" type=\"password\" />\n//         <ErrorMessage name=\"repassword\" />\n\n\n//         <button type=\"submit\">Submit</button>\n//         </div>\n//     </div>\n//   </div>\n//       </Form>\n//     </Formik>\n//   );\n// };\n\n\nexport default SignUp\n"]},"metadata":{},"sourceType":"module"}